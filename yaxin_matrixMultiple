//
//  yaxin.cpp
//  leetcode_2qi
//
//  Created by 顾凯文 on 2017/6/2.
//  Copyright © 2017年 顾凯文. All rights reserved.
//  求矩阵与转置矩阵相乘后结果，因为是要求用指针数组所以需要关注怎么创建和初始化指针数组问题。
//  以下是简单的解法。
//  复杂解法是直接计算两个矩阵对应的第i行j列值

#include <stdio.h>
#include <iostream>
using namespace std;
int** matrix(int iv,int rows,int columns){
    // 原始矩阵初始化
    int **m = new int*[rows];
    for(int i=0;i<rows;++i){
        m[i] = new int[columns];
    }
    // 转置矩阵初始化
    int **mt = new int*[columns];
    for(int i=0;i<columns;++i){
        mt[i] = new int[rows];
    }
    // 原始矩阵赋值
    for(int i=0;i<rows;i++){
        for(int j=0;j<columns;j++){
            m[i][j] = iv+i*columns+j;
        }
    }
    // 转置矩阵赋值
    for(int i=0;i<rows;i++){
        for(int j=0;j<columns;j++){
            mt[j][i] = iv+i*columns+j;
        }
    }
    // 结果矩阵
    int **re = new int*[rows];
    for(int i=0;i<rows;++i){
        re[i] = new int[rows];
    }
    for(int i=0;i<rows;i++){
        for(int j=0;j<rows;j++){
            int value = 0;
            for(int k=0;k<columns;k++){
                value += m[i][k]*mt[k][j];
            }
            re[i][j] = value;
        }
    }
    return re;
}


int main(){
    int rows=0,columns=0;
    cin>>rows>>columns;
    int **result = new int*[rows];
    for(int i=0;i<rows;++i){
        result[i] = new int[rows];
    }
    result = matrix(1,rows,columns);
    for(int i=0;i<rows;i++){
        for(int j=0;j<rows;j++){
            cout<<result[i][j]<<endl;
        }
    }
    return 0;
}
